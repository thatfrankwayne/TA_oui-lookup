# TA_oui-lookup

# The 'mac' argument in the macros is a hardware address from which the OUI is extacted.
# The hardware address MUST comprise exactly 12 hexadecimal digits. Each pair of digits MAY be separated by a hyphen or a colon.
# Valid examples: '00-00-d8-fe-dc-ba', '00:00:d8:fe:dc:ba', '0000d8fedcba', '00:00-D8fEdCbA', '0000d8-fe:dc:ba'
# Invalid examples: 
#   '00-00-d8'                - incomplete 
#   '0-0-0-0-d-8-f-e-d-c-b-a' - digit pairs (octets) may not be separated
#   '00.00.d8.fe.dc.ba'       - improper separator
#   ' 00-00-d8-fe-dc-ba'      - leading space
#   '0000d8fedcba0000'        - trailing characters

# given the MAC in argument 1, emits a field 'vendor' if the OUI is found
[LOOKUP_OUI(1)]
args = mac
# definition = eval oui = substr(replace($mac$, "(\-|:)", ""), 1, 6) | lookup oui oui
definition = eval _oui = if(match($mac$, "^(?:[0-9a-zA-Z]{2}[:-]?){5}[0-9a-zA-Z]{2}$"), replace($mac$, "^([0-9a-zA-Z]{2})[:-]?([0-9a-zA-Z]{2})[:-]?([0-9a-zA-Z]{2}).*", "\1\2\3"), null()) | lookup oui oui AS _oui
iseval = false
description = Looks up the OUI of a MAC address and returns a vendor

# given the MAC in argument 1 and a fieldname in argument 2, emits a field with the specified fieldname if the OUI is found
[LOOKUP_OUI(2)]
args = mac, vendor
# definition = eval oui = substr(replace($mac$, "(\-|:)", ""), 1, 6) | lookup oui oui OUTPUT vendor AS $vendor$
definition = eval _oui = if(match($mac$, "^(?:[0-9a-zA-Z]{2}[:-]?){5}[0-9a-zA-Z]{2}$"), replace($mac$, "^([0-9a-zA-Z]{2})[:-]?([0-9a-zA-Z]{2})[:-]?([0-9a-zA-Z]{2}).*", "\1\2\3"), null()) | lookup oui oui AS _oui OUTPUT vendor AS $vendor$
iseval = false
description = Looks up the OUI of a MAC address and returns a vendor
